import React, { useState } from 'react';
import { Download, FileText } from 'lucide-react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { useData } from '../contexts/DataContext';
import { format } from 'date-fns';

const PDFExport: React.FC = () => {
  const [isExporting, setIsExporting] = useState(false);
  const { data, analysis } = useData();

  const exportToPDF = async () => {
    if (!data || !analysis) {
      alert('No data available for export');
      return;
    }

    setIsExporting(true);
    
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Title
      pdf.setFontSize(20);
      pdf.setTextColor(30, 64, 175); // Blue color
      pdf.text('Student Data Analysis Report', 20, 25);
      
      // Date
      pdf.setFontSize(10);
      pdf.setTextColor(100, 116, 139);
      pdf.text(`Generated on: ${format(new Date(), 'PPP')}`, 20, 35);
      
      // Summary Statistics
      pdf.setFontSize(14);
      pdf.setTextColor(51, 65, 85);
      pdf.text('Summary Statistics', 20, 50);
      
      pdf.setFontSize(10);
      pdf.setTextColor(71, 85, 105);
      const stats = [
        `Total Students: ${analysis.totalStudents}`,
        `Average Performance: ${analysis.averagePerformance}%`,
        `Students at Risk: ${analysis.atRiskStudents}`,
        `Skill Coverage: ${analysis.skillCoverage}%`
      ];
      
      stats.forEach((stat, index) => {
        pdf.text(stat, 25, 60 + (index * 8));
      });
      
      // Risk Distribution
      pdf.setFontSize(14);
      pdf.setTextColor(51, 65, 85);
      pdf.text('Risk Assessment', 20, 100);
      
      pdf.setFontSize(10);
      pdf.setTextColor(71, 85, 105);
      const riskLabels = ['Low Risk', 'Medium Risk', 'High Risk'];
      analysis.riskDistribution.forEach((count: number, index: number) => {
        pdf.text(`${riskLabels[index]}: ${count} students`, 25, 110 + (index * 8));
      });
      
      // Recommendations
      pdf.setFontSize(14);
      pdf.setTextColor(51, 65, 85);
      pdf.text('Recommendations', 20, 150);
      
      pdf.setFontSize(10);
      pdf.setTextColor(71, 85, 105);
      const recommendations = [
        '• Implement targeted tutoring for at-risk students',
        '• Develop skill-specific learning modules',
        '• Create peer mentoring programs',
        '• Regular progress monitoring and assessment',
        '• Focus on practical application of theoretical concepts'
      ];
      
      recommendations.forEach((rec, index) => {
        pdf.text(rec, 25, 160 + (index * 8));
      });
      
      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(148, 163, 184);
      pdf.text('Generated by AI Student Data Dashboard', 20, pageHeight - 15);
      
      // Save the PDF
      pdf.save(`student-analysis-report-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF report');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <button
      onClick={exportToPDF}
      disabled={isExporting || !data || !analysis}
      className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
    >
      {isExporting ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
          <span>Exporting...</span>
        </>
      ) : (
        <>
          <Download className="w-4 h-4" />
          <span>Export PDF</span>
        </>
      )}
    </button>
  );
};

export default PDFExport;